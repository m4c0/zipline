module;
#include <algorithm>
#include <array>
#include <exception>
#include <optional>

export module deflate:details;
import bitstream;
import containers;
import huffman;
import yoyo;

namespace zipline::details {
// Magic constants gallore - it should follow this RFC:
// https://datatracker.ietf.org/doc/html/rfc1951
// Note: PKZIP's "APPNOTE" does not match these

static constexpr const auto hlit_count_bits = 5U;
static constexpr const auto hdist_count_bits = 5U;
static constexpr const auto hclen_count_bits = 4U;

static constexpr const auto hlit_min = 257;
static constexpr const auto hdist_min = 1;
static constexpr const auto hclen_min = 4;

static constexpr const auto hlit_max = 286;
static constexpr const auto hdist_max = 32;

static constexpr const auto max_code_lengths = 19;
static constexpr const auto hclen_order = std::array{
    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
static_assert(hclen_order.size() == max_code_lengths);

static constexpr const auto hclen_bits = 3U;

struct dynamic_huffman_format {
  unsigned hlit;
  unsigned hdist;
  unsigned hclen;
};

[[nodiscard]] static constexpr auto read_hc_format(bitstream *bits) {
  dynamic_huffman_format res{};
  res.hlit = bits->next<hlit_count_bits>() + hlit_min;
  res.hdist = bits->next<hdist_count_bits>() + hdist_min;
  res.hclen = bits->next<hclen_count_bits>() + hclen_min;
  return res;
}

[[nodiscard]] static constexpr auto
read_hclens(bitstream *bits, const dynamic_huffman_format &fmt) {
  std::array<unsigned, max_code_lengths> res{};
  for (int i = 0; i < fmt.hclen; i++) {
    res.at(hclen_order.at(i)) = bits->next<hclen_bits>();
  }
  return res;
}

constexpr const auto copy_previous = 16;
constexpr const auto repeat_zero_3_10 = 17;
constexpr const auto repeat_zero_11_138 = 18;
[[nodiscard]] static constexpr auto code_to_repeat(unsigned code,
                                                   unsigned previous) {
  switch (code) {
  case copy_previous:
    return previous;
  case repeat_zero_3_10:
  case repeat_zero_11_138:
    return 0U;
  default:
    return code;
  }
}
[[nodiscard]] static constexpr auto repeat_count(unsigned code,
                                                 bitstream *bits) {
  switch (code) {
  case copy_previous:
    return 3U + bits->next<2>();
  case repeat_zero_3_10:
    return 3U + bits->next<3>();
  case repeat_zero_11_138:
    return 11U + bits->next<7>(); // NOLINT;
  default:
    return 1U;
  }
}
[[nodiscard]] static constexpr auto
read_hlit_hdist(const dynamic_huffman_format &fmt,
                const std::array<unsigned, max_code_lengths> &hclens,
                bitstream *bits) {
  containers::unique_array<unsigned> result{fmt.hlit + fmt.hdist};

  auto huff = create_huffman_codes(hclens);
  auto previous = 0U;
  auto *it = result.begin();
  while (it != result.end()) {
    auto code = decode_huffman(huff, bits);
    auto to_repeat = code_to_repeat(code, previous);
    auto count = repeat_count(code, bits);
    for (int j = 0; j < count; j++) {
      *it++ =
          to_repeat; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
    }
    previous = to_repeat;
  }

  return result;
}
} // namespace zipline::details

static constexpr const yoyo::ce_reader ex1{
    0x8d, 0x52, 0x4d, 0x6b, 0x83, 0x40, 0x10, 0xbd, 0xfb, 0x2b, 0x06, 0x0b,
    0x21, 0xa1, 0x98, 0x98, 0xd4, 0xe4, 0xa0, 0x78, 0x28, 0xb4, 0xf7, 0xde,
    0x9b, 0x22, 0xdb, 0xdd, 0x31, 0x91, 0xe8, 0xae, 0xcc, 0xae, 0xc5, 0xa6,
    0xe4, 0xbf, 0x77, 0xd4, 0x7c, 0x11, 0xda, 0xd2, 0xc3, 0xb0, 0xcb, 0x9b,
    0x37, 0xfb, 0xde, 0x1b, 0xbd, 0x2b, 0xb4, 0x2c, 0x1b, 0x85, 0xe0, 0x57,
    0x91, 0x0c, 0x67, 0x82, 0x76, 0xb3, 0x7d, 0x51, 0x4f, 0xd1, 0x48, 0x35,
    0xdd, 0xd6, 0xb5, 0xef, 0x79, 0xb3, 0x19, 0x3c, 0x6b, 0x15, 0x98, 0x3c,
    0x90, 0xa8, 0x1d, 0x89, 0x32, 0x50, 0x05, 0xa1, 0x74, 0x86, 0x3e, 0x61,
    0x2b, 0x2c, 0x08, 0x0d, 0xd8, 0x32, 0x0e, 0xd2, 0x54, 0x15, 0x33, 0xc0,
    0x19, 0x70, 0x68, 0xf9, 0xdc, 0x22, 0x10, 0x7e, 0x20, 0x59, 0x04, 0x8b,
    0xb8, 0x63, 0xa6, 0x3a, 0x52, 0x6b, 0xa1, 0x54, 0xa1, 0x37, 0x20, 0x1c,
    0xe4, 0x64, 0xb4, 0xf3, 0xac, 0x13, 0xae, 0x90, 0xfc, 0x84, 0xb6, 0x0e,
    0xdb, 0x9a, 0x40, 0x34, 0xfc, 0x4c, 0xe7, 0x22, 0x53, 0xc2, 0x09, 0x48,
    0xa1, 0xb3, 0x17, 0xc7, 0x85, 0x89, 0x63, 0x89, 0x19, 0xa1, 0x50, 0x48,
    0xf0, 0xe5, 0x01, 0xf8, 0xeb, 0x76, 0x19, 0xae, 0xdb, 0xe8, 0x7d, 0xdd,
    0x86, 0x73, 0xae, 0x05, 0x57, 0xe8, 0x03, 0xbb, 0x66, 0x91, 0x9b, 0xfe,
    0x92, 0x6b, 0xd5, 0xf5, 0xaf, 0xcb, 0x1f, 0x48, 0xfd, 0x70, 0x78, 0x39,
    0x23, 0xfc, 0x81, 0x14, 0x2d, 0x6e, 0xa7, 0xb9, 0x1e, 0xfa, 0x66, 0x10,
    0x04, 0x67, 0xd5, 0x43, 0xe2, 0x79, 0x8d, 0xed, 0x02, 0x6a, 0x51, 0xa1,
    0xad, 0x85, 0xc4, 0xa3, 0x7f, 0xde, 0x6f, 0x1c, 0xf3, 0x82, 0x99, 0x30,
    0x44, 0xce, 0x84, 0xb5, 0x48, 0x6e, 0xfc, 0xfa, 0xd6, 0xa7, 0xb9, 0x2c,
    0xa0, 0xbf, 0x0d, 0x6b, 0x10, 0xb9, 0x43, 0xca, 0xea, 0xdd, 0x72, 0x95,
    0xd5, 0xc6, 0xf2, 0x2e, 0x96, 0x70, 0x0f, 0x51, 0xd2, 0xa9, 0xbd, 0x3c,
    0x3e, 0xf1, 0xbd, 0x79, 0x58, 0x78, 0x3c, 0xdc, 0x93, 0x89, 0xfb, 0xe7,
    0xbd, 0x25, 0x8c, 0xe6, 0x85, 0x56, 0x59, 0x8f, 0xb0, 0x22, 0x2b, 0x8d,
    0x68, 0xd2, 0xc1, 0x84, 0xae, 0x21, 0x0d, 0x34, 0x75, 0x58, 0x96, 0x9b,
    0xf1, 0x04, 0xd2, 0xf4, 0x46, 0x28, 0xf1, 0x0e, 0xe3, 0x09, 0x73, 0xff,
    0x6f, 0x54, 0xaa, 0x2a, 0xb3, 0xc5, 0x1e, 0xd9, 0x42, 0xc8, 0x0b, 0x4c,
    0xfe, 0xe2, 0x99, 0x3c, 0xb7, 0xe8, 0x06, 0xe6, 0x22, 0xf9, 0xdd, 0xfe,
    0x69, 0x80, 0xf1, 0xee, 0xab, 0xf7, 0x49, 0x6e, 0x32, 0x70, 0x77, 0x2a,
    0x4d, 0xc3, 0xbf, 0x1e, 0x67, 0x98, 0xc3, 0x68, 0xd4, 0x23, 0x83, 0x91,
    0xf4, 0x62, 0xea, 0x88, 0x9f, 0x84, 0xd3, 0x2b, 0x1b, 0xa7, 0xa8, 0xdf,
};

using namespace zipline;
using namespace zipline::details;

static constexpr const auto fmt_offset = 3; // last block + dynamic
static constexpr const auto fmt = [] {
  ce_bitstream b{ex1};
  b.skip<fmt_offset>();
  return read_hc_format(&b);
}();
static constexpr const auto expected_hlit = 274;
static_assert(fmt.hlit == expected_hlit);
static constexpr const auto expected_hdist = 19;
static_assert(fmt.hdist == expected_hdist);
static constexpr const auto expected_hclen = 14;
static_assert(fmt.hclen == expected_hclen);

static constexpr const auto hclens_offset =
    fmt_offset + hlit_count_bits + hdist_count_bits + hclen_count_bits;
static constexpr const auto hclens = [] {
  ce_bitstream b{ex1};
  b.skip<hclens_offset>();
  return read_hclens(&b, fmt);
}();
constexpr const std::array<unsigned, 19> expected_hclens{
    2, 0, 0, 5, 4, 4, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 6, 4, 6};
static_assert(hclens == expected_hclens);

static_assert([] {
  ce_bitstream bits{ex1};
  bits.skip<hclens_offset + expected_hclen * 3>();

  const auto res = read_hlit_hdist(fmt, expected_hclens, &bits);
  if (res.at(0) != 0)
    return false;
  if (res.at(9) != 0)
    return false; // NOLINT
  if (res.at(10) != 6)
    return false; // NOLINT
  if (res.at(32) != 4)
    return false; // NOLINT
  if (res.at(58) != 6)
    return false; // NOLINT
  if (res.at(274 + 18) != 6)
    return false; // NOLINT
  return true;
}());
